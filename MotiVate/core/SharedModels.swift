//
//  SharedModels.swift
//  MotiVate
//
//  Created by Chris Venter on 25/5/2025.
//

import Foundation

/// Represents a category from the Supabase 'categories' table.
/// Maps to the following schema:
/// ```sql
/// create table public.categories (
///   id bigint generated by default as identity not null,
///   name text not null,
///   description text null,
///   created_at timestamp with time zone not null default now(),
///   constraint categories_pkey primary key (id)
/// )
/// ```
public struct CategoryItem: Decodable, Identifiable, Hashable {
    /// The unique identifier for the category.
    /// Maps to 'id bigint' in the database.
    public let id: Int64
    
    /// The display name of the category.
    /// Maps to 'name text not null' in the database.
    public let name: String
    
    /// An optional description of the category.
    /// Maps to 'description text null' in the database.
    public let description: String?
    
    // Note: created_at is available in the database but not needed for UI purposes.
    // If needed later, add:
    // public let createdAt: Date
    
    /// Public initializer to allow creating instances outside of decoding.
    public init(id: Int64, name: String, description: String? = nil) {
        self.id = id
        self.name = name
        self.description = description
    }
    
    // MARK: - Hashable Conformance
    
    public func hash(into hasher: inout Hasher) {
        hasher.combine(id)
    }
    
    // MARK: - Equatable Conformance
    
    public static func == (lhs: CategoryItem, rhs: CategoryItem) -> Bool {
        lhs.id == rhs.id
    }
}

// MARK: - Codable Support

extension CategoryItem {
    /// Coding keys that map Swift property names to JSON/database field names.
    private enum CodingKeys: String, CodingKey {
        case id
        case name
        case description
        // case createdAt = "created_at" // Uncomment if createdAt is needed
    }
}

// MARK: - Image Response Model

/// Represents the data structure returned by the `get_random_image` RPC function.
/// This model is shared between the main app and the widget extension.
public struct ImageResponse: Decodable, Identifiable {
    /// The unique identifier for the image.
    public let id: Int64
    
    /// The filename of the image (e.g., "image.jpeg").
    /// The full URL needs to be constructed using the base storage path.
    public let image_url: String
    
    /// The number of likes for the image.
    public let likes_count: Int
    
    /// The number of dislikes for the image.
    public let dislikes_count: Int
    
    /// Public initializer.
    public init(id: Int64, image_url: String, likes_count: Int, dislikes_count: Int) {
        self.id = id
        self.image_url = image_url
        self.likes_count = likes_count
        self.dislikes_count = dislikes_count
    }
    
    // CodingKeys to map snake_case from JSON to camelCase if property names differed.
    // Not strictly needed here if Supabase client handles it or names match exactly.
    // However, it's good practice for clarity with snake_case keys.
    private enum CodingKeys: String, CodingKey {
        case id
        case image_url // Matches JSON
        case likes_count // Matches JSON
        case dislikes_count // Matches JSON
    }
}